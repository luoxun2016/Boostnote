createdAt: "2019-06-06T01:13:56.032Z"
updatedAt: "2019-06-06T07:02:52.224Z"
type: "MARKDOWN_NOTE"
folder: "68880271cad111b4dcb5"
title: "Maven配置详解"
content: '''
  # Maven配置详解
  ---
  
  [Maven配置详解网页链接](https://luoxun11.iteye.com/blog/2441678)
  
  ## 配置优先级
  - 局部配置优先与全局配置
  - 配置优先级从高到低:pom.xml> user settings > global settings
  
  ## 顶级元素详解
  
  ### LocalRepository
  - 该值表示构建系统本地仓库的路径，默认为`${user.home}/.m2/repository`。
  
  ```xml
  <localRepository>${user.home}/.m2/repository</localRepository>
  ```
  ### InteractiveMode
  - 表示maven是否需要和用户交互以获得输入，如果maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。
  
  ```xml
  <interactiveMode>true</interactiveMode>
  ```
  ### UsePluginRegistry
  - maven是否需要使用plugin-registry.xml文件来管理插件版本，如果需要让maven使用文件~/.m2/plugin-registry.xml来管理插件版本，则设为true。默认为false。
  
  ```xml
  <usePluginRegistry>false</usePluginRegistry>
  ```
  ### Offline
  - 表示maven是否需要在离线模式下运行，如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。
  
  ```xml
  <offline>false</offline>
  ```
  ### PluginGroups
  - 当插件的组织id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表,当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。默认情况下该列表包含了`org.apache.maven.plugins`和`org.codehaus.mojo`。
  
  ```xml
    <pluginGroups>
      <!--plugin的组织Id（groupId） -->
      <pluginGroup>org.codehaus.mojo</pluginGroup>
    </pluginGroups>
  ```
  ### Servers
  - 一般仓库的下载和部署是在pom.xml文件中的`repositories`和`distributionManagement`元素中定义的。然而，一般类似用户名、密码（有些仓库访问是需要安全认证的）等信息不应该在`pom.xml`文件中配置，这些信息可以配置在settings.xml中。
  
  ```xml
  <servers>
    <server>
      <!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。 -->
      <id>server</id>
      <!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 -->
      <username>my_login</username>
      <!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面 -->
      <password>my_password</password>
      <!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是${user.home}/.ssh/id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 -->
      <privateKey>${usr.home}/.ssh/id_dsa</privateKey>
      <!--鉴权时使用的私钥密码。 -->
      <passphrase>some_passphrase</passphrase>
      <!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 -->
      <filePermissions>664</filePermissions>
      <!--目录被创建时的权限。 -->
      <directoryPermissions>775</directoryPermissions>
    </server>
  </servers>
  ```
  ### Mirrors
  - 为仓库列表配置的下载镜像列表，相当于给Maven获取仓库数据时配置了一个拦截器，`mirrorOf`配置需要拦截`repository`配置的id
  ```xml
  <mirrors>
    <!-- 给定仓库的下载镜像。 -->
    <mirror>
      <!-- 该镜像的唯一标识符。id用来区分不同的mirror元素。 -->
      <id>planetmirror.com</id>
      <!-- 镜像名称 -->
      <name>PlanetMirror Australia</name>
      <!-- 该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 -->
      <url>http://downloads.planetmirror.com/pub/maven2</url>
      <!-- 被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo.maven.apache.org/maven2/）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。 -->
      <mirrorOf>central</mirrorOf>
    </mirror>
  </mirrors>
  ```
  ### Proxies
  - 用来配置不同的代理
  
  ```xml
  <proxies>
    <!--代理元素包含配置代理时需要的信息 -->
    <proxy>
      <!--代理的唯一定义符，用来区分不同的代理元素。 -->
      <id>myproxy</id>
      <!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 -->
      <active>true</active>
      <!--代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。 -->
      <protocol>http</protocol>
      <!--代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。 -->
      <host>proxy.somewhere.com</host>
      <!--代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。 -->
      <port>8080</port>
      <!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 -->
      <username>proxyuser</username>
      <!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 -->
      <password>somepassword</password>
      <!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。 -->
      <nonProxyHosts>*.google.com|ibiblio.org</nonProxyHosts>
    </proxy>
  </proxies>
  ```
  
  ### Profiles
  - 根据环境参数来调整构建配置的列表。
  
  ```xml
  <profiles>
    <profile>
      <!-- profile的唯一标识 -->
      <id>test</id>
      <!-- 自动触发profile的条件逻辑 -->
      <activation />
      <!-- 扩展属性列表 -->
      <properties />
      <!-- 远程仓库列表 -->
      <repositories />
      <!-- 插件仓库列表 -->
      <pluginRepositories />
    </profile>
  </profiles>
  ```
  
  ### Activation
  - 自动触发profile的条件逻辑
  
  ```xml
  <activation>
    <!--profile默认是否激活的标识 -->
    <activeByDefault>false</activeByDefault>
    <!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 -->
    <jdk>1.5</jdk>
    <!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 -->
    <os>
      <!--激活profile的操作系统的名字 -->
      <name>Windows XP</name>
      <!--激活profile的操作系统所属家族(如 'windows') -->
      <family>Windows</family>
      <!--激活profile的操作系统体系结构 -->
      <arch>x86</arch>
      <!--激活profile的操作系统版本 -->
      <version>5.1.2600</version>
    </os>
    <!--如果Maven检测到某一个属性（其值可以在POM中通过${name}引用），其拥有对应的name = 值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 -->
    <property>
      <!--激活profile的属性的名称 -->
      <name>mavenVersion</name>
      <!--激活profile的属性的值 -->
      <value>2.0.3</value>
    </property>
    <!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 -->
    <file>
      <!--如果指定的文件存在，则激活profile。 -->
      <exists>${basedir}/file2.properties</exists>
      <!--如果指定的文件不存在，则激活profile。 -->
      <missing>${basedir}/file1.properties</missing>
    </file>
  </activation>
  ```
  
  ### properties
  - 对应profile的扩展属性列表
  
  ```xml
  <properties>
    <user.install>${user.home}/our-project</user.install>
  </properties>
  ```
  
  ### Repositories
  - 远程仓库列表，它是maven用来填充构建系统本地仓库所使用的一组远程仓库,id设置为`central`是中央仓库，其它都为私服仓库，maven查询仓库的顺序为本地仓库、私服仓库、中央仓库。
  
  ```xml
  <repositories>
    <repository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>libs-releases</name>
      <url>http://artifactory.jd.com/libs-releases</url>
    </repository>
    <repository>
      <snapshots />
      <id>snapshots</id>
      <name>libs-snapshots</name>
      <url>http://artifactory.jd.com/libs-snapshots</url>
    </repository>
  </repositories>
  ```
  
  ### pluginRepositories
  - 发现插件的远程仓库列表。和repository类似，只是repository是管理jar包依赖的仓库，pluginRepositories则是管理插件的仓库。
  
  ```xml
  <pluginRepositories>
    <pluginRepository>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <id>central</id>
      <name>plugins-releases</name>
      <url>http://artifactory.jd.com/plugins-releases</url>
    </pluginRepository>
    <pluginRepository>
      <snapshots />
      <id>snapshots</id>
      <name>plugins-snapshots</name>
      <url>http://artifactory.jd.com/plugins-snapshots</url>
    </pluginRepository>
  </pluginRepositories>
  ```
  
  ### ActiveProfiles
  - 手动激活profiles的列表中的profile。
  
  ```xml
  <activeProfiles>
    <!-- 要激活的profile id -->
    <activeProfile>artifactory</activeProfile>
  </activeProfiles>
  ```
'''
tags: []
isStarred: false
isTrashed: false
